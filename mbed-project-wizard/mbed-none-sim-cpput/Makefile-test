###
# Purpose: to create a bare-metal with mbed SDK and cpputest suitable for QEMU simulation

###
# Time in seconds to simulate unit tests
SIMTIME=2

###
# GNU ARM Embedded Toolchain
CC=arm-none-eabi-gcc
CXX=arm-none-eabi-g++
LD=arm-none-eabi-ld
AR=arm-none-eabi-ar
AS=arm-none-eabi-as
CP=arm-none-eabi-objcopy
OD=arm-none-eabi-objdump
NM=arm-none-eabi-nm
SIZE=arm-none-eabi-size
A2L=arm-none-eabi-addr2line
GCOV=arm-none-eabi-gcov

###
# Directory Structure
BINDIR=bin
INCDIR=inc
SRCDIR=src
LIBDIR=lib
TESTDIR=test
CPPUTEST_SRCDIR=~/stm32/cpputest

###
# Find source files
ASOURCES=$(shell find -L $(SRCDIR) -name '*.s')
ASOURCES+=$(shell find -L $(LIBDIR) -name '*.s' -not -name 'startup_stm32f407xx.s')
CSOURCES=$(shell find -L $(SRCDIR) -name '*.c' -not -name 'main.c')
CSOURCES+=$(shell find -L $(LIBDIR) -name '*.c')
CSOURCES+=$(shell find -L $(TESTDIR) -name '*.c')
CXXSOURCES=$(shell find -L $(SRCDIR) -name '*.cpp' -not -name 'main.cpp')
# Filter out mbed IO retarget. We use newlib rdimon IO retarget (via lib) that is 
# suitable for QEMU semihosted simulation
CXXSOURCES+=$(filter-out %retarget.cpp, $(shell find -L $(LIBDIR)/cpputest -name '*.cpp'))
CXXSOURCES+=$(shell find -L $(TESTDIR) -name '*.cpp')
# Find header directories
INC=$(shell find -L $(INCDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
INC+=$(shell find -L $(LIBDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
INC+=$(shell find -L $(LIBDIR) -type d -name '*include' | uniq)
INC+=$(shell find -L $(TESTDIR) -type f -name '*.h' -exec dirname {} \; | uniq)
INCLUDES=$(INC:%=-I%)
# Find libraries
LIBFILES=$(shell find $(LIBDIR) -type f -name '*.a')
INCLUDES_LIBS=$(patsubst %,-L%, $(dir $(LIBFILES)))
LINK_LIBS=$(patsubst lib%, -l%, $(basename $(notdir $(LIBFILES))))
LINK_LIBS+=-lrdimon -lgcov
# Create object list
AOBJECTS=$(ASOURCES:%.s=%.o)
COBJECTS=$(CSOURCES:%.c=%.o)
CXXOBJECTS=$(CXXSOURCES:%.cpp=%.o)
# Define output files ELF & IHEX
BINELF=test.elf
BINHEX=test.hex

###
# MCU FLAGS
# QEMU currently supports only cortex-m3 CPU and soft FPU (but not cortex-m4 with hard FPU)
MCFLAGS=-mcpu=cortex-m3 -mthumb -mlittle-endian -mfloat-abi=soft -mthumb-interwork
# COMPILE FLAGS
DEFS=-DTARGET_STM32F407 -D__CORTEX_M4 -D__FPU_PRESENT -DWORDS_STACK_SIZE=200
CFLAGS=-c $(MCFLAGS) $(DEFS) $(INCLUDES) -fprofile-arcs -ftest-coverage -std=c99
CXXFLAGS=-c $(MCFLAGS) $(DEFS) $(INCLUDES) -fprofile-arcs -ftest-coverage -std=c++11
CXXFLAGS+=-U__STRICT_ANSI__ # Undefine __STRICT_ANSI__ to compile Stream.cpp using c++11. This is a dirty hack!
# LINKER FLAGS
LDFLAGS =$(MCFLAGS) --specs=nosys.specs --specs=rdimon.specs $(INCLUDES_LIBS) $(LINK_LIBS)

###
# Build Rules
.PHONY: all release release-memopt debug deps clean deps-clean

all: release-memopt

release-memopt-blame: CFLAGS+=-g
release-memopt-blame: CXXFLAGS+=-g
release-memopt-blame: LDFLAGS+=-g -Wl,-Map=$(BINDIR)/output.map
release-memopt-blame: release-memopt
release-memopt-blame:
	@echo "Top 10 space consuming symbols from the object code ...\n"
	$(NM) -A -l -C -td --reverse-sort --size-sort $(BINDIR)/$(BINELF) | head -n10 | cat -n # Output legend: man nm
	@echo "\n... and corresponging source files to blame.\n"
	$(NM) --reverse-sort --size-sort -S -tx $(BINDIR)/$(BINELF) | head -10 | cut -d':' -f2 | cut -d' ' -f1 | $(A2L) -e $(BINDIR)/$(BINELF) | cat -n # Output legend: man addr2line

release-memopt: DEFS+=-DCUSTOM_NEW -DNO_EXCEPTIONS
release-memopt: CFLAGS+=-Os -ffunction-sections -fdata-sections -fno-builtin # -flto
release-memopt: CXXFLAGS+=-Os -ffunction-sections -fdata-sections -fno-builtin #-fno-exceptions -fno-rtti # -flto
release-memopt: LDFLAGS+=-Os -Wl,-gc-sections #--specs=nano.specs # -flto
release-memopt: release

debug: CFLAGS+=-g
debug: CXXFLAGS+=-g
debug: LDFLAGS+=-g
debug: release

release: $(BINDIR)/$(BINHEX)

$(BINDIR)/$(BINHEX): $(BINDIR)/$(BINELF)
	$(CP) -O ihex $< $@
	@echo "Objcopy from ELF to IHEX complete!\n"

$(BINDIR)/$(BINELF): $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS)
	$(CXX) $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS) $(LDFLAGS) -o $@
	@echo "Linking complete!\n"
	$(SIZE) $(BINDIR)/$(BINELF)

%.o: %.cpp
	$(CXX) $(CXXFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

%.o: %.c
	$(CC) $(CFLAGS) $< -o $@
	@echo "Compiled "$<"!\n"

%.o: %.s
	$(CC) $(CFLAGS) $< -o $@
	@echo "Assambled "$<"!\n"

deps:
	mkdir -p tmp && rm -rf tmp/* # && cd $(CPPUTEST_SRCDIR) && ./autogen.sh 
	cd tmp && $(CPPUTEST_SRCDIR)/configure --host=arm-none-eabi --prefix=$(shell pwd)/lib/cpputest  LDFLAGS="$(MCFLAGS) --specs=rdimon.specs $(INCLUDES_LIBS) $(LINK_LIBS)" CFLAGS="$(MCFLAGS) $(INCLUDES) -std=c99" CXXFLAGS="$(MCFLAGS) $(INCLUDES)" && make && make install
	rm -rf tmp

clean:
	rm -f $(AOBJECTS) $(COBJECTS) $(CXXOBJECTS) $(BINDIR)/$(BINELF) $(BINDIR)/$(BINHEX) $(BINDIR)/output.map
	find . -type f -name '*.gcno' -exec rm -f {} \;
	find . -type f -name '*.gcda' -exec rm -f {} \;
	find . -type f -name '*.gcov' -exec rm -f {} \;

deps-clean:
	rm -rf lib/cpputest

deploy:
	@echo "\nRunning Unit Tests on QEMU Simulator (change SIMTIME variable to adjust simulation time)\n" 
	(timeout $(SIMTIME) qemu-system-arm -cpu cortex-m3 -machine versatilepb -monitor null -serial null -semihosting -nographic -kernel bin/$(BINELF) || true)
	@echo "Evaluating Test Coverage\n"
	find src -name '*.cpp' -not -name 'main.cpp' -not -name 'main.c' -exec $(GCOV) {} \;
	@echo "Displaying Test Coverage Details\n"
	find . -name '*.gcov' -exec sed -e 1s/^/---\\n/g {} \;
