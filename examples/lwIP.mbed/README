Project template created by gen-stm32f407-GCC-project.sh mbed-none
   mbed-none ... creates a bare-metal project with mbed SDK

Usage: make && sudo make deploy
       ifconfig eth0:0 192.168.255.99 netmask 255.255.255.0 up
       ping 192.168.34.100 # The IP of the embedded device

Git info:
   stm32:    e472cd5cea (lwip)
   mbed:     a94eb663dc (mbed_lib_rev91)

# Additional info
# Add lwip without OS
rsync -a --exclude .git ../../lwip/ lib/lwip # Copy the repo
rm -r lib/lwip/test # Remove Unit Test
rm -r lib/lwip/src/core/ipv6 # Remove IPv6 Stack
rm -r lib/lwip/src/include/ipv6 # Remove IPv6 Headers	

# Copy STM32F4x7 lwIP port files (thx, STM32Cube) to ./lib/lwip/port
# http://lwip.wikia.com/wiki/LwIP_Platform_Developers_Manual

# Copy lwip.h, lwipopts.h to ./inc
# Copy lwip.c to ./src

# Change ./src/main.cpp
12a13
> #include "lwip.h"
13a15,17
> void SystemClock_Config(void);
> static void MX_GPIO_Init(void);
> 
17,22c21,34
<     while(1) {
<         myled = 1;
<         wait(0.2);
<         myled = 0;
<         wait(0.2);
<     }
---
> 
>   /* Configure the system clock */
>   SystemClock_Config();
>   /* Initialize all configured peripherals */
>   MX_GPIO_Init();
>   MX_LWIP_Init();
> 
>   while(1) {
>       MX_LWIP_Process();
>       myled = myled ^ 1;
>       //wait(0.2);
>       //myled = 0;
>       //wait(0.2);
>   }
25,28c37,38
< /*
<  * Override C++ new/delete operators to reduce memory footprint
<  */
< #ifdef CUSTOM_NEW
---
> void MX_GPIO_Init(void)
> {
30,32c40
< void *operator new(size_t size) {
<         return malloc(size);
< }
---
>   GPIO_InitTypeDef GPIO_InitStruct;
34,36c42,54
< void *operator new[](size_t size) {
<         return malloc(size);
< }
---
>   /* GPIO Ports Clock Enable */
>   __GPIOH_CLK_ENABLE();
>   __GPIOC_CLK_ENABLE();
>   __GPIOA_CLK_ENABLE();
>   __GPIOB_CLK_ENABLE();
> 
>   /*Configure GPIO pin : PA8 */
>   GPIO_InitStruct.Pin = GPIO_PIN_8;
>   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
>   GPIO_InitStruct.Pull = GPIO_NOPULL;
>   GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
>   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
>   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
38,39d55
< void operator delete(void *p) {
<         free(p);
42,44c58,90
< void operator delete[](void *p) {
<         free(p);
< }
---
> /** System Clock Configuration
> */
> void SystemClock_Config(void)
> {
> 
>   RCC_OscInitTypeDef RCC_OscInitStruct;
>   RCC_ClkInitTypeDef RCC_ClkInitStruct;
> 
>   __PWR_CLK_ENABLE();
> 
>   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
> 
>   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
>   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
>   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
>   RCC_OscInitStruct.HSICalibrationValue = 6;
>   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
>   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
>   RCC_OscInitStruct.PLL.PLLM = 8;
>   RCC_OscInitStruct.PLL.PLLN = 336;
>   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
>   RCC_OscInitStruct.PLL.PLLQ = 4;
>   HAL_RCC_OscConfig(&RCC_OscInitStruct);
> 
>   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
>                               |RCC_CLOCKTYPE_PCLK2;
>   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
>   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
>   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
>   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
>   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
> 
>   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
46c92
< #endif
---
> }